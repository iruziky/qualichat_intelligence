# -*- coding: utf-8 -*-
"""Repository for persisting chat history."""
import json
from pathlib import Path
from typing import Any, Dict, List


class HistoryRepository:
    """
    Manages the persistence of conversation history in a local JSON file.
    """

    def __init__(self, db_path: str = "chat_history.json"):
        """
        Initializes the repository and ensures the database file exists.

        Args:
            db_path: The path to the JSON file used for storage.
        """
        self.db_path = Path(db_path)
        self._ensure_db_exists()

    def _ensure_db_exists(self):
        """Creates the JSON history file if it doesn't exist."""
        if not self.db_path.exists():
            with open(self.db_path, "w", encoding="utf-8") as f:
                json.dump([], f)

    def _read_history(self) -> List[Dict[str, Any]]:
        """Reads the entire history from the JSON file."""
        with open(self.db_path, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return []

    def _write_history(self, history: List[Dict[str, Any]]):
        """Writes the entire history to the JSON file."""
        with open(self.db_path, "w", encoding="utf-8") as f:
            json.dump(history, f, indent=2, ensure_ascii=False)

    def add_interaction(
        self, user_message: str, bot_response: str, metadata: dict = None
    ):
        """
        Adds a user-bot interaction to the history.

        Args:
            user_message: The message sent by the user.
            bot_response: The response generated by the bot.
            metadata: Optional metadata to store with the interaction.
        """
        history = self._read_history()
        interaction = {
            "user_message": user_message,
            "bot_response": bot_response,
            "metadata": metadata or {},
        }
        history.append(interaction)
        self._write_history(history)

    def get_history(self, limit: int = 50) -> List[Dict[str, Any]]:
        """
        Retrieves the last N interactions from the history.

        Args:
            limit: The maximum number of interactions to retrieve.

        Returns:
            A list of interaction dictionaries.
        """
        history = self._read_history()
        return history[-limit:]

    def clear_history(self):
        """Clears all interactions from the history."""
        self._write_history([])
